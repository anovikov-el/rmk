{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RMK CLI - Reduced Management for Kubernetes","text":"<p>Command line tool for reduced management and provisioning of Kubernetes clusters and environments, Helm secrets and releases.</p> <ul> <li>RMK CLI - Reduced Management for Kubernetes<ul> <li>Overview<ul> <li>Advantages</li> <li>Edenlab LLC use cases<ul> <li>Related OSS repositories</li> </ul> </li> </ul> </li> <li>Requirements</li> <li>Quickstart</li> <li>Installation</li> <li>Update<ul> <li>General update process</li> <li>Update to specific version</li> </ul> </li> <li>Configuration<ul> <li>Configuration management</li> <li>Project management<ul> <li>Requirement for project repository</li> <li>Preparation of project repository</li> <li>Dependencies management and Project inheritance</li> </ul> </li> <li>Cluster management<ul> <li>Exported environment variables</li> </ul> </li> <li>Release management</li> <li>Secrets management</li> </ul> </li> <li>Commands</li> <li>Features</li> <li>Supported Kubernetes providers</li> <li>Roadmap</li> <li>Development and release</li> <li>License</li> <li>Code of Conduct</li> </ul> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>This tool has been designed and developed initially by Edenlab LLC as the main CLI for managing Kodjin FHIR Server on Kubernetes clusters in different environments.</p> <p>It is a wrapper around many popular CI/CD and DevOps CLI tools, including:</p> <ul> <li>Helmfile</li> <li>Helm</li> <li>kubectl</li> <li>SOPS</li> <li>Terraform</li> <li>K3D</li> </ul> <p>The main goal of the tool is to simplify (\u201creduce\u201d) management of Kubernetes clusters and releases.</p> <p>RMK is an abbreviation which stands for \u201cReduced Management for Kubernetes\u201d.</p>"},{"location":"#advantages","title":"Advantages","text":"<p>RMK simplifies the start of any level of complexity of a project using Kubernetes due to the following advantages:</p> <ul> <li>Respects the GitOPS approach: Each Git branch is used as a unique identifier for determining the environment, cluster name,    set of configurations and other attributes required for setting up the wrapped tools for project management in the Kubernetes environment.</li> <li>Respects the GitLabFlow workflow: Supports the standard develop, staging, production and different ephemeral (e.g, feature, release) environments.</li> <li>Provides a transparent project structure with a basic set of configurations: Allows you to correctly reuse configurations between projects    and inherit project configurations from other repositories, e.g., establish parent-child (\u201cupstream-downstream\u201d) project relationships.</li> <li>Allows a diverse team to work in the DevOPS methodology without blocking each other: Each team or multiple teams    can develop and release their projects separately, later on the result of their work can be combined in a single project.</li> <li>Supports versioning of projects in a CI/CD pipeline: Each project can be versioned and referenced by static or dynamic tags (e.g., SemVer2),    which guarantees stable, well-tested and predictable releases.</li> <li>Integrates with any CI/CD tool easily: The tool is a self-sufficient binary that strictly follows the 12 factor app methodology.</li> <li>Calls the CLI tools directly instead of using their libraries/SDKs: RMK executes the tools directly in a way that a typical person would do it,    passing correct sets of CLI arguments and flags to the commands based on a project configuration structure.   This decouples the updating of RMK itself from the wrapped CLI tools, allowing developers to utilize recent functionality and fixes.</li> </ul>"},{"location":"#edenlab-llc-use-cases","title":"Edenlab LLC use cases","text":"<p>At Edenlab LLC, RMK is used for deploying the Kodjin FHIR Server.</p> <p>A classic Kodjin installation uses 3-level inheritance:</p> <ul> <li>Dependencies (upstream#1): Core components like DBs, search engines, caches, load balancers/proxies, operators   etc.</li> <li>Kodjin (downstream#1): Kodjin FHIR API (REST)</li> <li>Target installation (downstream#2): Products based on Kodjin, such as UI components, user portals and middleware services.</li> </ul> <p>The additional components used by Kodjin are:</p> <ul> <li>*.provisioner.infra: RMK cluster provider repositories for Kubernetes cluster provisioning.</li> <li>helmfile.hooks.infra: Shell scrips used as Helmfile hooks in   deps/Kodjin/any other tenant.</li> <li>core.charts.infra: Helm charts used by the Kodjin services.</li> </ul> <p>The examples of Kubernetes providers, to which Kodjin has been installed already, are:</p> <ul> <li>Amazon Elastic Kubernetes Service (EKS)</li> <li>Azure Kubernetes Service (AKS)</li> <li>Open Telekom Cloud - Cloud Container Engine (CCE)</li> <li>Rancher Kubernetes Platform</li> <li>Kubermatic Kubernetes Platform (KKP)</li> <li>on-premise installations deployed using Ansible Kubespray</li> <li>single-machine K3D clusters</li> </ul>"},{"location":"#related-oss-repositories","title":"Related OSS repositories","text":"<ul> <li>AWS cluster provider for RMK</li> <li>Azure cluster provider for RMK</li> <li>K3D cluster provider for RMK</li> <li>Helmfile hooks</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Currently, RMK only supports Unix-like operating systems (OS):</p> <ul> <li>OS:<ul> <li>MacOS: amd64, arm64 (M1, M2 require Rosetta)</li> <li>Linux: amd64</li> </ul> </li> <li>Software:<ul> <li>Python &gt;= 3.9</li> <li>AWS CLI</li> <li>For managing local clusters using K3D: Version v5.x.x requires Docker =&gt; v20.10.5 (runc &gt;= v1.0.0-rc93) to work       properly.</li> </ul> </li> </ul> <p>If this is your first project repository managed by RMK, ensure that the above tools are specified in the project.yaml file.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install RMK, run the self-installer script using the following command:</p> <pre><code>curl -sL \"https://edenlabllc-rmk.s3.eu-north-1.amazonaws.com/rmk/s3-installer\" | bash\n</code></pre> <p>Alternatively, you can go directly to https://github.com/edenlabllc/rmk/releases and download the binary.</p> <p>As another option, the binary can be built from source.</p>"},{"location":"#update","title":"Update","text":""},{"location":"#general-update-process","title":"General update process","text":"<p>To update RMK to the latest version, run the following command:</p> <pre><code>rmk update\n</code></pre>"},{"location":"#update-to-specific-version","title":"Update to specific version","text":"<p>You can update to a specific RMK version to maintain backward compatibility or when updating to the latest version is not possible. </p> <p>This may be necessary due to specific version requirements or when a bug has been detected. </p> <p>To update to a specific version, use the following command:</p> <pre><code>rmk update --version vX.X.X \n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Reduced and simplified management of Kubernetes projects: Deploy to Kubernetes using Helmfile/Helm, use popular DevOps tools together in a single CI/CD pipeline.</li> <li>Time-proven project structure: Define the project structure using the GitLabFlow methodology.</li> <li>Hierarchies between different projects: Define upstream-downstream relationships between sibling projects to reuse releases and services across different installations.</li> <li>Batch secret management: Template, generate, and encode project secrets for all environments in a batch manner.</li> <li>Clone environments with one click: Use the special <code>--config-from-environment</code> (<code>--cfe</code>) flag to create an environment based on an existing one.</li> <li>Automatic detection of Multi-Factor Authentication (MFA): Automatically detect and use an MFA device if one is defined by an IAM user (must be supported by the cluster provider, e.g., AWS).</li> <li>Push-based release and downstream project updates: Easily integrate with CI/CD solutions via webhooks or workflow dispatch events    to update release and service version declarations, automatically commit the changes to Git.</li> <li>Project structure generation: Generate a complete Kubernetes-based project structure from scratch using RMK, following the best practices.</li> <li>Documentation generation: Generate the full command documentation in the Markdown format with one click.</li> <li>Support for different types of code sources: Use Git when the artifact-mode is none, S3 when the artifact-mode is online. </li> </ul>"},{"location":"#supported-kubernetes-providers","title":"Supported Kubernetes providers","text":"<p>By design, RMK can work with any Kubernetes provider.</p> <p>Among the providers are:</p> <ul> <li>Amazon Elastic Kubernetes Service (EKS)</li> <li>Azure Kubernetes Service (AKS)</li> <li>Google Kubernetes Engine (GKE)</li> <li>Red Hat OpenShift</li> <li>VMware Tanzu Kubernetes Grid</li> <li>Rancher Kubernetes Platform</li> <li>Open Telekom Cloud - Cloud Container Engine (CCE)</li> <li>Kubermatic Kubernetes Platform (KKP)</li> <li>on-premise installations deployed using Ansible Kubespray</li> <li>single-machine K3D clusters</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>Guidelines for contributors: Create comprehensive guidelines for contributors, including instructions for creating pull requests (PRs).</li> <li>Integration with Helmfile vals: Integrate RMK with the vals tool for enhanced values and secret management.</li> <li>Major update of the AWS EKS cluster provider: Update the AWS EKS cluster provider to the latest versions to utilize all the supported features of the Terraform CLI and modules.</li> <li>Implementation of additional RMK cluster providers using Kubernetes Cluster API: Implement support for additional cluster providers for popular Kubernetes services such as GKE, AKS, etc.</li> <li>Web documentation generator: Add an HTML documentation generator based on the .md files.</li> <li>Automatic testing of RMK during the CI/CD pipeline: Ensure that changes to the RMK codebase do not introduce errors or regressions during the CI/CD.</li> </ul> <p>Check the issues for more information.</p>"},{"location":"#development-and-release","title":"Development and release","text":"<p>The guidelines are available at the link.</p>"},{"location":"#license","title":"License","text":"<p>RMK is open source software (OSS) licensed under the Apache 2.0 License.</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to the Contributor Covenant \u0421ode of \u0421onduct.  By participating, you are expected to uphold this code. Please refer to our Contributing Guidelines for further information.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and maintainers pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the maintainers responsible for enforcement and specified in  CODEOWNERS.</p> <p>All complaints will be reviewed and investigated promptly and fairly.</p> <p>All maintainers are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Maintainers will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from maintainers, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines","text":""},{"location":"CONTRIBUTING/#reporting-issues","title":"Reporting Issues","text":"<p>Before creating a new issue, please check first if a similar issue already exists or was recently closed.</p>"},{"location":"CONTRIBUTING/#contributing-code","title":"Contributing Code","text":"<p>Currently, we do not accept pull requests. Please report an issue instead.</p>"},{"location":"CONTRIBUTING/#code-review","title":"Code Review","text":"<p>Everyone is invited to review and comment on pull requests.</p>"},{"location":"SECURITY/","title":"Security Policy","text":""},{"location":"SECURITY/#supported-versions","title":"Supported Versions","text":"<p>We release patches for security vulnerabilities for latest software versions.</p>"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>The security team and community take all security vulnerabilities seriously.  Thank you for improving the security of our open source software.  We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions.</p> <p>Report security vulnerabilities by notifying the team specified in CODEOWNERS.</p> <p>The lead maintainers will acknowledge your email and send a more detailed response indicating the next steps in handling your report.  After the initial reply to your report, the security team will endeavor to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.</p> <p>Report security vulnerabilities in third-party modules to the person or team maintaining the module.</p>"},{"location":"SECURITY/#disclosure-policy","title":"Disclosure Policy","text":"<p>When the security team receives a security bug report, they will assign it to a primary handler.  This person will coordinate the fix and release process, involving the following steps:</p> <ul> <li>Confirm the problem and determine the affected versions.</li> <li>Audit code to find any potential similar problems.</li> <li>Prepare fixes for all releases still under maintenance. These fixes will be released as fast as possible.</li> </ul>"},{"location":"SECURITY/#preferred-languages","title":"Preferred Languages","text":"<p>We prefer all communications to be in English.</p>"},{"location":"commands/","title":"NAME","text":"<p>RMK CLI - Reduced management for Kubernetes</p>"},{"location":"commands/#synopsis","title":"SYNOPSIS","text":"<p>rmk</p> <pre><code>[--help|-h]\n[--log-format|--lf]=[value]\n[--log-level|--ll]=[value]\n[--version|-v]\n</code></pre>"},{"location":"commands/#description","title":"DESCRIPTION","text":"<p>Command line tool for reduced management of the provision of Kubernetes clusters in different environments and management of service releases.</p> <p>BuiltBy: goreleaser  Commit: 7a0f199  Date: 2024-09-04T07:46:16Z  Target: linux_amd64</p> <p>Usage:</p> <pre><code>rmk [GLOBAL OPTIONS] command [COMMAND OPTIONS] [ARGUMENTS...]\n</code></pre>"},{"location":"commands/#global-options","title":"GLOBAL OPTIONS","text":"<p>\u2013help, -h: show help</p> <p>\u2013log-format, \u2013lf=\u201d\u201c: log output format, available: console, json (default: \u201cconsole\u201d)</p> <p>\u2013log-level, \u2013ll=\u201d\u201c: log level severity, available: debug, info, error (default: \u201cinfo\u201d)</p> <p>\u2013version, -v: print the version</p>"},{"location":"commands/#commands","title":"COMMANDS","text":""},{"location":"commands/#cluster","title":"cluster","text":"<p>Cluster management</p>"},{"location":"commands/#container-registry-c","title":"container-registry, c","text":"<p>Container registry management</p>"},{"location":"commands/#login","title":"login","text":"<p>Log in to container registry</p> <p>\u2013get-token, -g: get ECR token for authentication</p>"},{"location":"commands/#logout","title":"logout","text":"<p>Log out from container registry</p>"},{"location":"commands/#destroy-d","title":"destroy, d","text":"<p>Destroy AWS cluster using Terraform</p>"},{"location":"commands/#list-l","title":"list, l","text":"<p>List all Terraform available workspaces</p>"},{"location":"commands/#k3d-k","title":"k3d, k","text":"<p>K3D cluster management</p>"},{"location":"commands/#create-c","title":"create, c","text":"<p>Create K3D cluster</p> <p>\u2013k3d-volume-host-path, \u2013kv=\u201d\u201c: host local directory path for mount into K3D cluster (default: present working directory)</p>"},{"location":"commands/#delete-d","title":"delete, d","text":"<p>Delete K3D cluster</p>"},{"location":"commands/#import-i","title":"import, i","text":"<p>Import images from docker to K3D cluster</p> <p>\u2013k3d-import-image, \u2013ki=\u201d\u201c: list images for import into K3D cluster</p>"},{"location":"commands/#list-l_1","title":"list, l","text":"<p>List K3D clusters</p>"},{"location":"commands/#start-s","title":"start, s","text":"<p>Start K3D cluster</p>"},{"location":"commands/#stop","title":"stop","text":"<p>Stop K3D cluster</p>"},{"location":"commands/#provision-p","title":"provision, p","text":"<p>Provision AWS cluster using Terraform</p> <p>\u2013plan, -p: creates an execution Terraform plan</p>"},{"location":"commands/#state-t","title":"state, t","text":"<p>State cluster management using Terraform</p>"},{"location":"commands/#delete-d_1","title":"delete, d","text":"<p>Delete resource from Terraform state</p> <p>\u2013resource-address, \u2013ra=\u201d\u201c: resource address for delete from Terraform state</p>"},{"location":"commands/#list-l_2","title":"list, l","text":"<p>List resources from Terraform state</p>"},{"location":"commands/#refresh-r","title":"refresh, r","text":"<p>Update state file for AWS cluster using Terraform</p>"},{"location":"commands/#switch-s","title":"switch, s","text":"<p>Switch Kubernetes context for tenant cluster</p> <p>\u2013force, -f: force update Kubernetes context from remote cluster</p>"},{"location":"commands/#completion","title":"completion","text":"<p>Completion management</p>"},{"location":"commands/#zsh-z","title":"zsh, z","text":"<p>View Zsh completion scripts</p>"},{"location":"commands/#config","title":"config","text":"<p>Configuration management</p>"},{"location":"commands/#init-i","title":"init, i","text":"<p>Initialize configuration for current tenant and selected environment</p> <p>\u2013artifact-mode, \u2013am=\u201d\u201c: choice of artifact usage model, available: none, online (default: \u201cnone\u201d)</p> <p>\u2013aws-ecr-host, \u2013aeh=\u201d\u201c: AWS ECR host (default: \u201c288509344804.dkr.ecr.eu-north-1.amazonaws.com\u201d)</p> <p>\u2013aws-ecr-region, \u2013aer=\u201d\u201c: AWS region for specific ECR host (default: \u201ceu-north-1\u201d)</p> <p>\u2013aws-ecr-user-name, \u2013aeun=\u201d\u201c: AWS ECR user name (default: \u201cAWS\u201d)</p> <p>\u2013aws-reconfigure, -r: force AWS profile creation</p> <p>\u2013aws-reconfigure-artifact-license, -l: force AWS profile creation for artifact license, used only if RMK config option artifact-mode has values: online, offline</p> <p>\u2013cloudflare-token, \u2013cft=\u201d\u201c: Cloudflare API token for provision NS records</p> <p>\u2013cluster-provider, \u2013cp=\u201d\u201c: select cluster provider to provision clusters (default: \u201caws\u201d)</p> <p>\u2013cluster-provisioner-state-locking, -c: disable or enable cluster provisioner state locking</p> <p>\u2013config-from-environment, \u2013cfe=\u201d\u201c: inheritance of RMK config credentials from environments: develop, staging, production</p> <p>\u2013github-token, \u2013ght=\u201d\u201c: personal access token for download GitHub artifacts</p> <p>\u2013progress-bar, -p: globally disable or enable progress bar for download process</p> <p>\u2013root-domain, \u2013rd=\u201d\u201c: domain name for external access to app services via ingress controller</p> <p>\u2013s3-charts-repo-region, \u2013scrr=\u201d\u201c: location constraint region of S3 charts repo (default: \u201ceu-north-1\u201d)</p> <p>\u2013slack-channel, \u2013sc=\u201d\u201c: channel name for Slack notification</p> <p>\u2013slack-message-details, \u2013smd=\u201d\u201c: additional information for body of Slack message</p> <p>\u2013slack-notifications, -n: enable Slack notifications</p> <p>\u2013slack-webhook, \u2013sw=\u201d\u201c: URL for Slack webhook</p>"},{"location":"commands/#delete-d_2","title":"delete, d","text":"<p>Delete configuration for selected environment</p>"},{"location":"commands/#list-l_3","title":"list, l","text":"<p>List available configurations for current tenant</p> <p>\u2013all, -a: list all tenant configurations</p>"},{"location":"commands/#view-v","title":"view, v","text":"<p>View configuration for selected environment</p>"},{"location":"commands/#doc","title":"doc","text":"<p>Documentation management</p> <p>\u2013help, -h: show help</p>"},{"location":"commands/#generate-g","title":"generate, g","text":"<p>Generate documentation by commands and flags in Markdown format</p> <p>\u2013help, -h: show help</p>"},{"location":"commands/#help-h","title":"help, h","text":"<p>Shows a list of commands or help for one command</p>"},{"location":"commands/#help-h_1","title":"help, h","text":"<p>Shows a list of commands or help for one command</p>"},{"location":"commands/#project","title":"project","text":"<p>Project management</p>"},{"location":"commands/#generate-g_1","title":"generate, g","text":"<p>Generate project directories and files structure</p> <p>\u2013create-sops-age-keys, -c: create SOPS age keys for generated project structure</p>"},{"location":"commands/#update-u","title":"update, u","text":"<p>Update project file with specific dependencies version</p> <p>\u2013dependency, -d=\u201d\u201c: specific dependency name for updating project file</p> <p>\u2013skip-ci, -i: add [skip ci] to commit message line to skip triggering other CI builds</p> <p>\u2013skip-commit, -c: only change a version in for project file without committing and pushing it</p> <p>\u2013version, -v=\u201d\u201c: specific dependency version for updating project file</p>"},{"location":"commands/#release","title":"release","text":"<p>Release components list from state file (Helmfile)</p>"},{"location":"commands/#build-b","title":"build, b","text":"<p>Build releases</p> <p>\u2013helmfile-args, \u2013ha=\u201d\u201c: Helmfile additional arguments</p> <p>\u2013helmfile-log-level, \u2013hll=\u201d\u201c: Helmfile log level severity, available: debug, info, warn, error (default: \u201cerror\u201d)</p> <p>\u2013selector, -l=\u201d\u201c: only run using releases that match labels. Labels can take form of foo=bar or foo!=bar</p> <p>\u2013skip-context-switch, -s: skip context switch for not provisioned cluster</p>"},{"location":"commands/#destroy-d_1","title":"destroy, d","text":"<p>Destroy releases</p> <p>\u2013helmfile-args, \u2013ha=\u201d\u201c: Helmfile additional arguments</p> <p>\u2013helmfile-log-level, \u2013hll=\u201d\u201c: Helmfile log level severity, available: debug, info, warn, error (default: \u201cerror\u201d)</p> <p>\u2013output, -o=\u201d\u201c: output format, available: short, yaml (default: \u201cshort\u201d)</p> <p>\u2013selector, -l=\u201d\u201c: only run using releases that match labels. Labels can take form of foo=bar or foo!=bar</p> <p>\u2013skip-context-switch, -s: skip context switch for not provisioned cluster</p>"},{"location":"commands/#list-l_4","title":"list, l","text":"<p>List releases</p> <p>\u2013helmfile-args, \u2013ha=\u201d\u201c: Helmfile additional arguments</p> <p>\u2013helmfile-log-level, \u2013hll=\u201d\u201c: Helmfile log level severity, available: debug, info, warn, error (default: \u201cerror\u201d)</p> <p>\u2013output, -o=\u201d\u201c: output format, available: short, yaml (default: \u201cshort\u201d)</p> <p>\u2013selector, -l=\u201d\u201c: only run using releases that match labels. Labels can take form of foo=bar or foo!=bar</p> <p>\u2013skip-context-switch, -s: skip context switch for not provisioned cluster</p>"},{"location":"commands/#rollback-r","title":"rollback, r","text":"<p>Rollback specific releases to latest stable state</p> <p>\u2013release-name, \u2013rn=\u201d\u201c: list release names for rollback status in Kubernetes</p> <p>\u2013skip-context-switch, -s: skip context switch for not provisioned cluster</p>"},{"location":"commands/#sync-s","title":"sync, s","text":"<p>Sync releases</p> <p>\u2013helmfile-args, \u2013ha=\u201d\u201c: Helmfile additional arguments</p> <p>\u2013helmfile-log-level, \u2013hll=\u201d\u201c: Helmfile log level severity, available: debug, info, warn, error (default: \u201cerror\u201d)</p> <p>\u2013selector, -l=\u201d\u201c: only run using releases that match labels. Labels can take form of foo=bar or foo!=bar</p> <p>\u2013skip-context-switch, -s: skip context switch for not provisioned cluster</p>"},{"location":"commands/#template-t","title":"template, t","text":"<p>Template releases</p> <p>\u2013helmfile-args, \u2013ha=\u201d\u201c: Helmfile additional arguments</p> <p>\u2013helmfile-log-level, \u2013hll=\u201d\u201c: Helmfile log level severity, available: debug, info, warn, error (default: \u201cerror\u201d)</p> <p>\u2013selector, -l=\u201d\u201c: only run using releases that match labels. Labels can take form of foo=bar or foo!=bar</p> <p>\u2013skip-context-switch, -s: skip context switch for not provisioned cluster</p>"},{"location":"commands/#update-u_1","title":"update, u","text":"<p>Update releases file with specific environment values</p> <p>\u2013commit, -c: only commit and push changes for releases file</p> <p>\u2013deploy, -d: deploy updated releases after committed and pushed changes</p> <p>\u2013repository, -r=\u201d\u201c: specific repository for updating releases file</p> <p>\u2013skip-ci, -i: add [skip ci] to commit message line to skip triggering other CI builds</p> <p>\u2013skip-context-switch, -s: skip context switch for not provisioned cluster</p> <p>\u2013tag, -t=\u201d\u201c: specific tag for updating releases file</p>"},{"location":"commands/#secret","title":"secret","text":"<p>secrets management</p>"},{"location":"commands/#manager-m","title":"manager, m","text":"<p>batch secrets management</p>"},{"location":"commands/#decrypt-d","title":"decrypt, d","text":"<p>Decrypt secrets batch for selected scope and environment</p> <p>\u2013environment, -e=\u201d\u201c: specific environments for selected secrets</p> <p>\u2013scope, -s=\u201d\u201c: specific scopes for selected secrets</p>"},{"location":"commands/#encrypt-e","title":"encrypt, e","text":"<p>Encrypt secrets batch for selected scope and environment</p> <p>\u2013environment, -e=\u201d\u201c: specific environments for selected secrets</p> <p>\u2013scope, -s=\u201d\u201c: specific scopes for selected secrets</p>"},{"location":"commands/#generate-g_2","title":"generate, g","text":"<p>Generate secrets batch for selected scope and environment</p> <p>\u2013environment, -e=\u201d\u201c: specific environments for selected secrets</p> <p>\u2013force, -f: force overwriting current secrets after generating new</p> <p>\u2013scope, -s=\u201d\u201c: specific scopes for selected secrets</p>"},{"location":"commands/#keys-k","title":"keys, k","text":"<p>SOPS age keys management</p>"},{"location":"commands/#create-c_1","title":"create, c","text":"<p>Create SOPS age keys</p>"},{"location":"commands/#download-d","title":"download, d","text":"<p>Download SOPS age keys from S3 bucket</p>"},{"location":"commands/#upload-u","title":"upload, u","text":"<p>Upload SOPS age keys to S3 bucket</p>"},{"location":"commands/#encrypt-e_1","title":"encrypt, e","text":"<p>Encrypt secret file</p>"},{"location":"commands/#decrypt-d_1","title":"decrypt, d","text":"<p>Decrypt secret file</p>"},{"location":"commands/#view-v_1","title":"view, v","text":"<p>View secret file</p>"},{"location":"commands/#edit","title":"edit","text":"<p>Edit secret file</p>"},{"location":"commands/#update","title":"update","text":"<p>Update RMK CLI to a new version</p> <p>\u2013release-candidate, -r: force update RMK to latest release candidate version</p> <p>\u2013version, -v=\u201d\u201c: RMK special version. (default: empty value corresponds latest version)</p>"},{"location":"commands/#help-h_2","title":"help, h","text":"<p>Shows a list of commands or help for one command</p>"},{"location":"development-and-release/","title":"Development and release","text":""},{"location":"development-and-release/#development","title":"Development","text":""},{"location":"development-and-release/#requirements-for-the-availability-of-tools-during-development","title":"Requirements for the availability of tools during development","text":"<ul> <li>Golang = v1.21.X</li> <li>GoReleaser = v1.23.0</li> </ul>"},{"location":"development-and-release/#building-from-source","title":"Building from source","text":"<p>To build RMK from source, run the following GoReleaser command from the root of the repository:</p> <pre><code>goreleaser build --snapshot --clean\n</code></pre> <p>You can also use this command for recompilation of RMK during development.</p>"},{"location":"development-and-release/#git-workflow","title":"Git workflow","text":"<p>In RMK development, we use the classic GitFlow workflow,  embracing all its advantages and disadvantages.</p>"},{"location":"development-and-release/#git-branch-naming-conventions","title":"Git branch naming conventions","text":"<ul> <li><code>feature/RMK-&lt;issue_number&gt;-&lt;issue_description&gt;</code></li> <li><code>release/&lt;SemVer2&gt;</code></li> <li><code>hotfix/&lt;SemVer2&gt;</code></li> </ul> <p>For example:</p> <ul> <li><code>feature/RMK-123-add-some-important-feature</code></li> <li><code>release/v0.42.0</code></li> <li><code>hotfix/v0.42.1</code></li> </ul>"},{"location":"development-and-release/#release","title":"Release","text":"<p>After accumulating a certain set of features in the develop branch,  a <code>release/&lt;SemVer2&gt;</code> branch is created for the next release version.  Then a pull request (PR) is made from the <code>release/&lt;SemVer2&gt;</code> branch to the master branch.  This triggers a CI process that will build and release an intermediate version,  the <code>&lt;SemVer2&gt;-rc</code> release candidate. </p> <p>This version is available for update from RMK via the <code>rmk update --release-candidate</code> command and can be used for an intermediate or beta testing. </p> <p>After successful testing, the PR is merged into the master branch,  triggering another CI process that will release the stable RMK version. </p> <p>All CI processes are performed using GoReleaser, including the publishing of artifacts  for both the release and intermediate RMK versions.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This guide demonstrates how to use <code>RMK</code> to prepare the structure of a new project in five steps, create a local cluster based on <code>K3D</code>, deploy your first application (Nginx) using <code>Helmfile</code> releases.</p> <p>Prerequisites:</p> <ul> <li>An active AWS user with access keys and the <code>AdministratorAccess</code> permissions.</li> <li>A prepared project repository</li> <li>Installed RMK</li> <li>The fulfilled requirements for proper RMK operation.</li> </ul> <ol> <li>Create a project.yaml     file in the root of the project repository with the following content:</li> </ol> <pre><code>project:\n  spec:\n    environments:\n      - develop\n    owners:\n      - owner\n    scopes:\n      - rmk-test\ninventory:\n  clusters:\n    k3d.provisioner.infra:\n      version: v0.2.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  helm-plugins:\n    diff:\n      version: v3.8.1\n      url: https://github.com/databus23/helm-diff\n    helm-git:\n      version: v0.15.1\n      url: https://github.com/aslafy-z/helm-git\n    secrets:\n      version: v4.5.0\n      url: https://github.com/jkroepke/helm-secrets\n  hooks:\n    helmfile.hooks.infra:\n      version: v1.18.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  tools:\n    terraform:\n      version: 1.0.2\n      url: https://releases.hashicorp.com/{{.Name}}/{{.Version}}/{{.Name}}_{{.Version}}_{{.Os}}_amd64.zip\n      checksum: https://releases.hashicorp.com/{{.Name}}/{{.Version}}/{{.Name}}_{{.Version}}_SHA256SUMS\n      os-linux: linux\n      os-mac: darwin\n    kubectl:\n      version: 1.27.6\n      url: https://dl.k8s.io/release/v{{.Version}}/bin/{{.Os}}/amd64/{{.Name}}\n      checksum: https://dl.k8s.io/release/v{{.Version}}/bin/{{.Os}}/amd64/{{.Name}}.sha256\n      os-linux: linux\n      os-mac: darwin\n    helm:\n      version: 3.10.3\n      url: https://get.helm.sh/{{.Name}}-v{{.Version}}-{{.Os}}-amd64.tar.gz\n      checksum: https://get.helm.sh/{{.Name}}-v{{.Version}}-{{.Os}}-amd64.tar.gz.sha256sum\n      os-linux: linux\n      os-mac: darwin\n    helmfile:\n      version: 0.157.0\n      url: https://github.com/{{.Name}}/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}_{{.Version}}_{{.Os}}_amd64.tar.gz\n      checksum: https://github.com/{{.Name}}/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}_{{.Version}}_checksums.txt\n      os-linux: linux\n      os-mac: darwin\n    sops:\n      version: 3.8.1\n      url: https://github.com/getsops/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}-v{{.Version}}.{{.Os}}\n      os-linux: linux.amd64\n      os-mac: darwin\n      rename: true\n    age:\n      version: 1.1.1\n      url: https://github.com/FiloSottile/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}-v{{.Version}}-{{.Os}}-amd64.tar.gz\n      os-linux: linux\n      os-mac: darwin\n    k3d:\n      version: 5.6.0\n      url: https://github.com/k3d-io/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}-{{.Os}}-amd64\n      os-linux: linux\n      os-mac: darwin\n      rename: true\n</code></pre> <ol> <li> <p>Run the RMK configuration initialization command for the repository:</p> <pre><code>rmk config init --root-domain=localhost --github-token=&lt;github_personal_access_token&gt;\n</code></pre> <p>When executing the command, properly fill in the AWS credentials and region.  RMK will save the references for them in the system and use them for subsequent executions of this command.  In our example, the AWS credentials are used to create an S3 bucket for storing private SOPS Age keys  and distributing them among team members.</p> </li> <li> <p>Generate the project structure according to the project.yaml file:</p> <pre><code>rmk project generate --create-sops-age-keys\n</code></pre> </li> <li> <p>Create a local K3D cluster:</p> <p>Before running this step, ensure that Docker is installed in the system according to the requirements.</p> <pre><code>rmk cluster k3d create\n</code></pre> </li> <li> <p>Generate and encrypt secrets for the <code>Helmfile</code> release (Nginx):</p> <pre><code>rmk secret manager generate\nrmk secret manager encrypt\n</code></pre> </li> <li> <p>Deploy the <code>Helmfile</code> release (Nginx) to the local <code>K3D</code> cluster:</p> <pre><code>rmk release sync\n</code></pre> </li> </ol> <p>At this stage, we have completed the deployment of our test application (Nginx) provided by the <code>Helmfile</code> release  to the local <code>K3D</code> cluster, also the structure of the future project has been prepared. </p> <p>We can check the availability of the application in the Kubernetes cluster using the following command:</p> <pre><code>kubectl port-forward $(kubectl get pod --namespace rmk-test --output name) 8088:80 --namespace rmk-test\n</code></pre> <p>Open your browser and enter the http://localhost:8088 address, after which you will see the Nginx welcome page.</p> <p>Next, you can commit your changes to a Git branch and push them to your VCS (e.g., GitHub).  You can also upload the private SOPS Age keys using the following command: </p> <pre><code>rmk secret keys upload\n</code></pre> <p>After that, your team members will be able to deploy this project on their own, skipping the 2nd and 4th steps.</p>"},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#27-fixed-development-and-releasemd-guides-links-to-them-from-readmemd-and-indexmd","title":"27 - Fixed development-and-release.md guides, links to them from README.md and index.md.","text":""},{"location":"configuration/configuration-management/","title":"Configuration management","text":"<p>To start working with Kubernetes clusters, RMK needs to initialize the configuration for the current environment. At the time of configuration initialization launch, RMK prepares the state in the form of the current environment config with all the required attributes for further work. It also downloads and resolves and installs all necessary dependencies and tools described  in the project.yaml file in the root of the project repository.</p>"},{"location":"configuration/configuration-management/#list-of-main-attributes-of-the-rmk-configuration","title":"List of main attributes of the RMK configuration","text":"<p>Example of the configuration:</p> <pre><code>name: kodjin-develop # RMK config name, a unique identifier which consists of the tenant name and the abbreviated name of the Git branch.\ntenant: kodjin # Tenant name.\nenvironment: develop # Environment name.\nconfig-from: kodjin-develop # Configuration name from which the cluster configuration was inherited.\nroot-domain: kodjin-develop.edenlab.dev # Root domain name used across the cluster.\naws:\n  profile: kodjin-develop # AWS profile name for the AWS CLI.\n  region: eu-north-1 # AWS region of the current Kubernetes cluster.\n  account_id: \"123456789\"\n# ...\n</code></pre> <p>All attributes can be overridden using RMK flags or environment variables.</p>"},{"location":"configuration/configuration-management/#initialization-of-rmk-configuration","title":"Initialization of RMK configuration","text":"<p>Prerequisites:</p> <ul> <li>The <code>GITHUB_TOKEN</code> variable or <code>--github-token</code> flag are required: GitHub Personal Access Tokens (PAT). <p>The token should have the <code>repo: full control</code> permissions.</p> </li> <li>Project repository has already been created and initialized.</li> <li>At least one Git branch for the environment exists already.</li> </ul> <pre><code>rmk config init\n</code></pre>"},{"location":"configuration/configuration-management/#configuration-of-aws-profile","title":"Configuration of AWS profile","text":"<p>If an AWS profile with the correct name has not been created previously during the first initialization of the configuration, RMK will start the creation process. The 2 supported configuration scenarios are:</p> <ul> <li>through environment variables: <code>AWS_REGION</code>, <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code></li> <li>interactive input: the AWS credentials will be requested one by one.</li> </ul> <p>If the environment variables has been declared before the  <code>rmk config init</code> command was run, RMK will create a profile based on their values. Otherwise, the interactive mode will begin.</p>"},{"location":"configuration/configuration-management/#support-for-multi-factor-authentication-mfa","title":"Support for Multi-Factor Authentication (MFA)","text":"<p>RMK automatically check for an MFA device, when the following command is executed: <code>rmk config init</code>.</p> <p>To set up an MFA device, if it is required by the administrator, the following actions should be executed:</p> <ol> <li>First, sign in to the AWS Management Console.</li> <li>Then, go to the following page to set up security    credentials: My security credentials</li> <li>Navigate to the \u201cMulti-factor authentication (MFA)\u201d section and set up an MFA device.     If a device name is required, specify a name.</li> <li>After that, sign out and sign in again to refresh AWS policies     (might be required in case of an IAM policy based on the <code>aws:MultiFactorAuthPresent</code> condition exists).</li> <li>Finally, on the \u201cMy security credentials\u201d page navigate to the \u201cAccess keys for CLI, SDK, &amp; API access\u201d section    and create a new AWS access key, if needed.</li> </ol> <p>For the detailed documentation regarding the MFA setup in AWS, go to  AWS documentation</p> <p>You can also check the lifetime of the session token by running the command: <code>rmk config init</code></p> <pre><code>2022-12-14T09:02:20.267+0100 INFO MFA remaining time for token validity: 11:59:48\n</code></pre>"},{"location":"configuration/configuration-management/#initialization-of-rmk-configuration-for-feature-or-release-clusters","title":"Initialization of RMK configuration for feature or release clusters","text":"<p>When initializing the RMK configuration for feature or release clusters, you can use inheritance  from a previously saved configuration that contains the necessary credentials to create a Kubernetes cluster. Let\u2019s say you want to create or connect to the feature cluster with the credentials of the <code>develop</code> cluster, in this case you must run the initialization command with the <code>--config-from-environment</code> flag. For example:</p> <pre><code>rmk config init --config-from-environment=&lt;develop|staging|production|ffs-XXX|vX.X.X-rc|vX.X.X&gt;\n</code></pre>"},{"location":"configuration/configuration-management/#reconfiguration-of-the-aws-profile-if-wrong-credentials-has-been-input","title":"Reconfiguration of the AWS profile if wrong credentials has been input","text":"<pre><code>rmk config init --aws-reconfigure\n</code></pre>"},{"location":"configuration/configuration-management/#initialization-of-rmk-configuration-with-a-custom-root-domain","title":"Initialization of RMK configuration with a custom root domain","text":"<pre><code>rmk config init --root-domain=\"example.com\"\n</code></pre>"},{"location":"configuration/configuration-management/#deletion-of-rmk-configuration","title":"Deletion of RMK configuration","text":"<pre><code>rmk config delete\n</code></pre> <p>When deleting the current RMK configuration, the respective AWS profile files will be deleted as well.</p>"},{"location":"configuration/configuration-management/#use-upstream-artifact-for-the-downstream-projects-repository","title":"Use upstream artifact for the downstream project\u2019s repository","text":"<p>RMK supports downloading an upstream project\u2019s artifact using additional \u201clicense\u201d AWS credentials.  To switch RMK to the artifact usage mode, you need to use additional flags when initializing the RMK configuration  for the current project. Additionally, before starting the initialization, you need to install the required version  of the upstream project to which you want to update. For example:</p> <pre><code>project:\n  dependencies:\n    - name: deps.bootstrap.infra\n      version: v2.17.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n      artifact-url: https://edenlabllc-{{.HelmfileTenant}}-artifacts-infra.s3.eu-north-1.amazonaws.com/{{.Version}}/{{.HelmfileTenant}}-{{.Version}}.tar.gz\n    # ...\n</code></pre> <p>The <code>artifact-url</code> field is required and contains the artifact URL generation template which consists  of the following fields.</p> <p>Set the <code>version</code> field to the version of the upstream project for the current project. For example:</p> <pre><code># artifact usage modes: none|online (default: \"none\")\nrmk config init --artifact-mode=online\n</code></pre> <p>Currently, only two artifact modes are supported:</p> <ul> <li><code>none</code>: The standard mode of RMK which is used for development normally, the codebase will be downloaded from GitHub repositories.   The mode does not require the presence of the special \u201clicense\u201d credentials.</li> <li><code>online</code>: Switches RMK to work with artifacts. In this mode, RMK will not use any credentials for GitHub    (e.g., personal access tokens), but will request additional license AWS credentials to download and unpack    the artifact from a repository like AWS S3.</li> </ul> <p>To change the \u201clicense\u201d AWS credentials when in the online artifact mode, use the following command:</p> <pre><code>rmk config init --aws-reconfigure-artifact-license\n</code></pre>"},{"location":"configuration/cluster-management/cluster-management/","title":"Cluster management","text":"<p>RMK uses Terraform and K3D for cluster management.</p> <p>RMK is suitable for both simple and complex Kubernetes deployments, enabling multi-level project inheritance through native Helmfile functionality.</p> <p>The 2 scenarios are:</p> <ul> <li>A cluster has already been provisioned via a 3rd-party tool/service: An existing Kubernetes context will be used by RMK.</li> <li>A cluster will be provisioned from scratch using RMK: Any of the supported cluster providers for RMK, such as AWS, K3D, etc. will be utilized.</li> </ul>"},{"location":"configuration/cluster-management/cluster-management/#switch-the-context-to-an-existing-kubernetes-cluster","title":"Switch the context to an existing Kubernetes cluster","text":"<p>Switching to an existing Kubernetes cluster depends on how it has been provisioned:</p> <ul> <li> <p>Using a 3rd party tool:</p> <p>Create a context with the name matching the pattern:</p> <pre><code>\\b&lt;project_name&gt;-&lt;environment&gt;\\b\n</code></pre> <p>The matching is case-insensitive. \\ <code>\\b</code> means the ASCII word boundary (<code>\\w</code> on one side and <code>\\W</code>, <code>\\A</code>, or <code>\\z</code> on the other).</p> <p>For example, if you are in the <code>project1</code> repository in the <code>develop</code> branch, any of the following Kubernetes contexts will be accepted:</p> <pre><code>project1-develop\nProject1-Develop\nPROJECT1-DEVELOP\nproject1-develop-cluster\nProject1-Develop-Cluster\nPROJECT1-DEVELOP-CLUSTER\nk3d-project1-develop\narn:aws:eks:us-east-1:123456789000:cluster/PROJECT1-DEVELOP-CLUSTER\n</code></pre> <p>If there are more than one Kubernetes context which match the regular expression simultaneously,  an error will be thrown indicating a conflict. For example, the following names will conflict:</p> <pre><code>project1-develop\nk3d-project1-develop\n</code></pre> </li> </ul> <ul> <li> <p>Using RMK cluster provider:</p> <p>Checkout to the branch from which the K8S cluster was previously created. </p> <p>An initialization might be required, if the RMK configuration for this cluster has not been created before:</p> <pre><code>rmk config init\n</code></pre> <p>The next command depends on whether a remote cluster provider (e.g., AWS) or a local one (e.g., K3D) has been used:</p> <ul> <li> <p>AWS:</p> <pre><code># --force might required to refresh the credentials after a long period of inactivity\nrmk cluster switch --force\n</code></pre> </li> </ul> <ul> <li> <p>K3D:</p> <p>Explicit switching to the Kubernetes context is not required, if a K3D cluster has been created already.  RMK will switch implicitly, when running any of the <code>rmk release</code> commands.</p> </li> </ul> </li> </ul> <p>Finally, run an RMK release command to verify the preparation of the Kubernetes context, e.g.:</p> <pre><code>rmk release list\n</code></pre>"},{"location":"configuration/cluster-management/cluster-management/#use-rmk-cluster-providers-to-provision-and-destroy-kubernetes-clusters","title":"Use RMK cluster providers to provision and destroy Kubernetes clusters","text":"<p>Currently, the following cluster providers are supported by RMK:</p> <ul> <li>aws.provisioner.infra: Configuration for managing AWS EKS   clusters using Terraform. Kubernetes clusters can be provisioned from scratch and destroyed    via the <code>rmk cluster provision</code>, <code>rmk cluster destroy</code> commands.</li> <li>k3d.provisioner.infra: Configuration for managing   single-machine clusters using K3D (suitable for both local development and minimal cloud deployments).    Kubernetes clusters can be created from scratch and deleted via the <code>rmk cluster k3d create</code>, <code>rmk cluster k3d delete</code> commands.</li> </ul> <p>Support for other cloud providers such as GCP, Azure will be implemented in the future. This enhancement will include the introduction of new RMK commands and cluster providers, as well as the addition of *.provisioner.infra repositories.</p>"},{"location":"configuration/cluster-management/cluster-management/#provision-or-destroy-aws-eks-kubernetes-clusters","title":"Provision or destroy AWS EKS Kubernetes clusters","text":"<p>AWS users must have the <code>AdministratorAccess</code> permissions to be able to provision and destroy EKS clusters.</p> <p>Before provisioning the K8S cluster, modify the core configurations for the on-demand cluster.  The core configurations are divided into two types:</p> <ul> <li> <p>variables (common AWS cluster management):</p> <p>Path: <code>etc/clusters/aws/&lt;environment&gt;/values/variables.auto.tfvars</code></p> <p>Frequently changed values:</p> <pre><code># k8s user list\nk8s_master_usernames = [] # list of AWS IAM users for K8S cluster management\nk8s_cluster_version  = \"1.27\" # current version of K8S (EKS) control plane\n# ...\n</code></pre> <p>Full list of input Terraform variables: <code>.PROJECT/inventory/clusters/aws.provisioner.infra-&lt;version&gt;/terraform/variables.tf</code></p> </li> </ul> <ul> <li> <p>worker-groups (resources for AWS worker nodes):</p> <p>Path: <code>etc/clusters/aws/&lt;environment&gt;/values/worker-groups.auto.tfvars</code></p> <p>Frequently changed values:</p> <pre><code>worker_groups = [\n  {\n    instance_type        = \"t3.xlarge\"\n    additional_userdata  = \"t3.xlarge\"\n    asg_desired_capacity = 1\n    asg_max_size         = 1\n    asg_min_size         = 1\n    ami_id               = \"ami-0dd8af8522cf16846\"\n  },\n  # ...\n]\n</code></pre> <ul> <li><code>instance_type</code>: AWS EC2 instance type</li> <li><code>asg_desired_capacity</code>: Number of nodes of a specific group.</li> <li><code>ami_id</code>: Identifier of AWS AMI image for EKS. <p>Each AWS region requires its own AMI image ID. To determine the appropriate ID for a specific region, run the following command:</p> <pre><code>AWS_PROFILE=$(rmk --lf=json config view | yq '.config.Profile') \\\nAWS_CONFIG_FILE=\"${HOME}/.aws/config_$(rmk --lf=json config view | yq '.config.Profile')\" \\\nAWS_SHARED_CREDENTIALS_FILE=\"${HOME}/.aws/credentials_$(rmk --lf=json config view | yq '.config.Profile')\" \\\nAWS_PAGER= \\\naws ssm get-parameter \\\n  --name /aws/service/eks/optimized-ami/&lt;eks_control_plane_version&gt;/amazon-linux-2/recommended/image_id \\\n  --region \"$(rmk --lf=json config view | yq '.config.Region')\" \\\n  --output text \\\n  --query Parameter.Value\n</code></pre> <p>Replace <code>&lt;eks_control_plane_version&gt;</code> with a correct version.</p> </li> </ul> </li> </ul> <p>To start provisioning a Kubernetes cluster, run the commands:</p> <pre><code># prepare only plan\nrmk cluster provision --plan\n# prepare plan and launch it\nrmk cluster provision\n</code></pre> <p>When the K8S cluster is ready, RMK automatically switches the kubectl context to the newly created K8S cluster.</p> <p>To destroy a Kubernetes cluster, run the command:</p> <pre><code>rmk cluster destroy\n</code></pre>"},{"location":"configuration/cluster-management/cluster-management/#create-or-delete-k3d-kubernetes-clusters","title":"Create or delete K3D Kubernetes clusters","text":"<p>RMK supports managing single-node Kubernetes clusters using K3D.</p> <p>The CLI will create a cluster according to the declarative instruction for K3D:  <code>.PROJECT/inventory/clusters/k3d.provisioner.infra-&lt;version&gt;/k3d.yaml</code>.</p> <p>Prerequisites:</p> <ol> <li>Create a separate feature branch: <code>feature/&lt;issue_key&gt;-&lt;issue_number&gt;-&lt;issue_description&gt;</code>.</li> <li>Initialize configuration for this branch with the <code>localhost</code> root domain name:</li> </ol> <pre><code>rmk config init --root-domain=localhost\n</code></pre>"},{"location":"configuration/cluster-management/cluster-management/#create-k3d-clusters","title":"Create K3D clusters","text":"<p>By default, RMK will use <code>volume-host-path</code> as the current directory:</p> <p>Run the following command:</p> <pre><code>rmk cluster k3d create\n</code></pre> <p>When the Kubernetes cluster is ready, RMK automatically switches the kubectl context to the newly created Kubernetes cluster.</p>"},{"location":"configuration/cluster-management/cluster-management/#delete-k3d-clusters","title":"Delete K3D clusters","text":"<pre><code>rmk cluster k3d delete\n</code></pre>"},{"location":"configuration/cluster-management/exported-environment-variables/","title":"Exported environment variables","text":""},{"location":"configuration/cluster-management/exported-environment-variables/#exported-environment-variables","title":"Exported environment variables","text":""},{"location":"configuration/cluster-management/exported-environment-variables/#terraform-output-variables","title":"Terraform output variables","text":"<p>RMK exports all output Terraform variables with the <code>rmk_</code> prefix for further use in the Helmfile releases.  For example, a Terraform <code>outputs.tf</code> file might look like:</p> <pre><code>output \"rmk_hosted_zone_id\" {\n  description = \"Hosted zone ID\"\n  value       = aws_route53_zone.hosted_zone.zone_id\n}\n\noutput \"rmk_hosted_zone_ns_record\" {\n  description = \"Nameserver of hosted zone\"\n  value       = aws_route53_zone.hosted_zone.name_servers[0]\n}\n</code></pre> <p>RMK converts the output variable keys from lowercase to uppercase and removes the <code>rmk_</code> prefix. To view the exported variables, run the <code>rmk config view</code> command and check the <code>exported-vars</code> section:</p> <pre><code>exported-vars:\n  terraform-output:\n    # ...\n    rmk_hosted_zone_id: ZXXXXXXXXXXXXXXXXX\n    rmk_hosted_zone_ns_record: ns-1522.awsdns-62.org\n    # ...\n  env:\n    # ...\n    HOSTED_ZONE_ID: ZXXXXXXXXXXXXXXXXX\n    HOSTED_ZONE_NS_RECORD: ns-1522.awsdns-62.org\n    # ...\n</code></pre> <p>The variables listed in the <code>env</code> section will be used when running the <code>rmk release ...</code> commands.</p> <p>Only the <code>string</code> and <code>boolean</code> types are supported for the output variables.</p>"},{"location":"configuration/cluster-management/exported-environment-variables/#default-exported-variables","title":"Default exported variables","text":"<p>By default, RMK exports the following environment variables to each launch of the <code>rmk release</code> category\u2019s commands:</p> <pre><code># AWS credentials are automatically generated by RMK during the configuration initialization\nAWS_PROFILE=&lt;project_name&gt;-&lt;project_branch&gt;\nAWS_CONFIG_FILE=${HOME}/.aws/config_&lt;project_name&gt;-&lt;project_branch&gt;\nAWS_SHARED_CREDENTIALS_FILE=${HOME}/.aws/credentials_&lt;project_name&gt;-&lt;project_branch&gt;\n# For example:\n# AWS_PROFILE=kodjin-develop\n# AWS_CONFIG_FILE=${HOME}/.aws/config_kodjin-develop\n# AWS_SHARED_CREDENTIALS_FILE=${HOME}/.aws/credentials_kodjin-develop\n\n# GitHub Personal Access Token\nGITHUB_TOKEN=&lt;github_personal_access_token&gt;\n\n# The path to the directory of the specific version of hooks required for the inherited upstream project\nHELMFILE_&lt;upstream_project_name&gt;_HOOKS_DIR=${PWD}/.PROJECT/inventory/hooks/&lt;hooks_repo_name&gt;-&lt;version&gt;\n# For example:\n# HELMFILE_DEPS_HOOKS_DIR=${PWD}/.PROJECT/inventory/hooks/helmfile.hooks.infra-v1.18.0\n\n# The path to the directory of the specific version of hooks required for the downstream project\nHELMFILE_&lt;downstream_project_name&gt;_HOOKS_DIR=${PWD}/.PROJECT/inventory/hooks/&lt;hooks_repo_name&gt;-&lt;version&gt;\n# For example:\n# HELMFILE_KODJIN_HOOKS_DIR=${PWD}/.PROJECT/inventory/hooks/helmfile.hooks.infra-v1.18.0\n\n# The paths to the directories of the listed inherited upstream projects in the JSON format.\nHELMFILE_&lt;project_name&gt;_PATHS='[{\"path\":\"${PWD}/.PROJECT/dependencies/&lt;upstream_repo_name&gt;-&lt;upstream_repo_version&gt;/helmfile.yaml.gotmpl\"}]'\n# For example:\n# HELMFILE_KODJIN_PATHS=[{\"path\":\"${PWD}/.PROJECT/dependencies/deps.bootstrap.infra-v2.18.0/helmfile.yaml.gotmpl\"}]\n\n# The version of the inherited upstream project\nHELMFILE_&lt;project_repo_name&gt;_VERSION=vN.N.N\n# For example:\n# HELMFILE_DEPS_BOOTSTRAP_INFRA_VERSION=v2.18.0\n\n# The configuration RMK name for the current project and environment\nNAME=&lt;project_name&gt;-&lt;project_branch&gt;\n# For example:\n# NAME=kodjin-develop\n\n# The root domain name for target applications in the cluster\nROOT_DOMAIN=&lt;project_name&gt;-&lt;project_branch&gt;.example.com\n# For example:\n# ROOT_DOMAIN=kodjin-develop.example.com\n\n# The path to the file with the merged private Age keys\nSOPS_AGE_KEY_FILE=${HOME}/.rmk/sops-age-keys/&lt;project_name&gt;-sops-age-keys-&lt;short_AWS_account_id&gt;/.keys.txt\n# For example:\n# SOPS_AGE_KEY_FILE=${HOME}/.rmk/sops-age-keys/kodjin-sops-age-keys-28804/.keys.txt\n\n# The tenant name, which is an equivalent to the project name\nTENANT=&lt;project_name&gt;\n# For example:\n# NAME=kodjin\n\n# The flag that indicates whether the cluster is currently based on K3D. The variable can be used for overriding values in the releases.\nK3D_CLUSTER=true\n</code></pre> <p>All exported variables and their values of the <code>rmk release command</code> category can be viewed by running all these commands in the debug mode: <pre><code>rmk --log-level=debug release list\n</code></pre></p>"},{"location":"configuration/project-management/dependencies-management-and-project-inheritance/","title":"Dependencies management and project inheritance","text":"<p>To work with the RMK project\u2019s repository, RMK needs to resolve and install additional dependencies that are described in the project.yaml file. The inheritance configuration of the upstream project\u2019s repository is defined in the <code>project.dependencies</code> section of the project.yaml file. All inherited upstream project repositories will be loaded into the <code>.PROJECT</code> directory  in the root directory according to the sections described in the project.yaml file.</p> <p>To override inherited versions of dependencies and add-ons described in the inventory,  you need to specify the entire block with all the required fields.</p> <pre><code>inventory:\n  # ...\n  hooks:\n    helmfile.hooks.infra:\n      version: v1.18.0\n      url: git::https://github.com/&lt;owner&gt;/{{.Name}}.git?ref={{.Version}}\n  # ...\n</code></pre> <p>Dependency resolution occurs when executing almost any RMK command, except for those in the <code>rmk config</code> command category.</p>"},{"location":"configuration/project-management/dependencies-management-and-project-inheritance/#change-dependency-versions-of-the-inherited-projects-repository","title":"Change dependency versions of the inherited project\u2019s repository","text":"<p>Find the <code>project</code> section in the project.yaml file and change the <code>version</code> value to the needed stable tag. For example:</p> <pre><code>project:\n  dependencies:\n    # ...\n    - name: &lt;upstream_repository_prefix&gt;.bootstrap.infra\n      version: v2.17.0 # e.g., a different version of the dependency is required by this project\n      url: git::https://github.com/&lt;owner&gt;/{{.Name}}.git?ref={{.Version}}\n    # ...\n</code></pre> <p>Then, in the <code>helmfiles</code> section of the <code>helmfile.yaml.gotmpl</code> file the <code>{{ env \"HELMFILE_&lt;project_name&gt;_PATHS\" }}</code> environment variable will be used, this way RMK will manage the dependencies of the nested <code>Helmfile</code>s.</p> <p>The variable name is formed according to the following template: <code>HELMFILE_&lt;project_name&gt;_PATHS</code>.  This mechanism is necessary for resolving circular dependencies correctly.</p>"},{"location":"configuration/project-management/dependencies-management-and-project-inheritance/#change-inherited-versions-of-helmfile-hooks","title":"Change inherited versions of Helmfile hooks","text":"<p>RMK allows to avoid controlling the versioning of the <code>Helmfile</code> hooks through the project.yaml file of the downstream project\u2019s repository, instead of it, RMK allows inheriting these version hooks from the upstream project\u2019s repository. It also supports multi-versioning of the <code>Helmfile</code> hooks as part of the inheritance from several upstream projects by a downstream project.</p> <p>In order for these features to work, you need to use the <code>HELMFILE_&lt;current_project_name&gt;_HOOKS_DIR</code> variable in <code>helmfile.yaml.gotmpl</code>. For example:</p> <pre><code>commonLabels:\n# ...\n  bin: {{ env \"HELMFILE_KODJIN_HOOKS_DIR\" }}/bin\n# ...\n</code></pre> <p>Let\u2019s look at the following examples of the inheritance:</p> <ol> <li> <p>Hook version inheritance from the upstream project\u2019s repository:</p> <p>The project.yaml file of the downstream project is the following:</p> <pre><code>project:\n  dependencies:\n    - name: kodjin.bootstrap.infra\n      version: v4.4.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n    # ...\n</code></pre> <p>In this case, a version of the Helmfile hooks in the <code>inventory.hooks</code> section is not specified, however,  it is indicated that the current project of the repository inherits <code>kodjin.bootstrap.infra</code> with the <code>v4.4.0</code> version.  In turn, <code>kodjin.bootstrap.infra</code> inherits the <code>deps.bootstrap.infra</code> repository.  The project.yaml file for the <code>kodjin.bootstrap.infra</code> repository is also missing the version of the hooks:</p> <pre><code>project:\n  dependencies:\n    - name: deps.bootstrap.infra\n      version: v2.19.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n    # ...\n</code></pre> <p>Also, the project.yaml file of the <code>deps.bootstrap.infra</code> repository will contain the version of the <code>Helmfile</code> hooks,  which will finally be inherited by the downstream project\u2019s repository.</p> <pre><code>inventory:\n  # ...\n  hooks:\n    helmfile.hooks.infra:\n      version: v1.18.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  # ...\n</code></pre> <p>There is no <code>project.dependencies</code> section in the project.yaml file of the <code>deps.bootstrap.infra</code> repository, since there is no inheritance.</p> <p>This configuration scheme is the most common and has the following inheritance scheme for the <code>Helmfile</code> hooks:</p> <pre><code>Project repo name:            deps.bootstrap.infra ---------&gt; kodjin.bootstrap.infra -------&gt; &lt;downstream_project&gt;.bootstrap.infra\nProject repo version:         v2.19.0                         v4.4.0                          &lt;downstream_project_version&gt;\nHooks repo name with version: helmfile.hooks.infra-v1.18.0 -&gt; helmfile.hooks.infra-v1.18.0 -&gt; helmfile.hooks.infra-v1.18.0\n</code></pre> </li> <li> <p>Hook version inheritance from the upstream project\u2019s repository in case the <code>Kodjin</code> project has a fixed version     of the <code>Helmfile</code> hooks specified in its project.yaml file:</p> <p>The project.yaml file of the downstream project is the following:</p> <pre><code>project:\n  dependencies:\n    - name: kodjin.bootstrap.infra\n      version: v4.4.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n    # ...\n</code></pre> <p>In this case, the version of the Helmfile hooks in the <code>inventory.hooks</code> section is not specified,  however, it is indicated that the current project of the repository inherits <code>kodjin.bootstrap.infra</code> with the <code>v4.4.0</code> version.  In turn, <code>kodjin.bootstrap.infra</code> inherits the <code>deps.bootstrap.infra</code> repository which already  has its own fixed version of <code>v1.17.0</code> of the <code>Helmfile</code> hooks in the <code>inventory.hooks</code> section:</p> <pre><code>project:\n  dependencies:\n    - name: deps.bootstrap.infra\n      version: v2.19.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n# ...\ninventory:\n  # ...\n  hooks:\n    helmfile.hooks.infra:\n      version: v1.17.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  # ...\n</code></pre> <p>The project.yaml file of the <code>deps.bootstrap.infra</code> repository will contain the version of the <code>Helmfile</code> hooks,  which will be inherited by the downstream project\u2019s repository:</p> <pre><code>inventory:\n  # ...\n  hooks:\n    helmfile.hooks.infra:\n      version: v1.18.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  # ...\n</code></pre> <p>This configuration scheme will look like this:</p> <pre><code>Project repo name:            deps.bootstrap.infra ---------&gt; kodjin.bootstrap.infra -------&gt; &lt;downstream_project&gt;.bootstrap.infra\nProject repo version:         v2.19.0                         v4.4.0                          &lt;downstream_project_version&gt;\nHooks repo name with version: helmfile.hooks.infra-v1.18.0 -&gt; helmfile.hooks.infra-v1.17.0 -&gt; helmfile.hooks.infra-v1.18.0\n</code></pre> <p>The downstream project\u2019s repository will inherit the latest version of <code>Helmfile</code> hooks, specifically from the <code>deps.bootstrap.infra</code> repository. As a result, in the downstream project\u2019s repository, we will have the two loaded versions of <code>Helmfile</code> hooks:</p> <ul> <li>One will be relevant for the <code>deps.bootstrap.infra</code> repository and the downstream project\u2019s repository.</li> <li>Another will be relevant for the <code>kodjin.bootstrap.infra</code> repository.</li> </ul> <p>This mechanism allows for multi-versioning support of the <code>Helmfile</code> hooks at different levels of the inheritance.</p> </li> <li> <p>Hook version inheritance from the upstream project\u2019s repository in case the downstream project    has a fixed version of <code>deps.bootstrap.infra</code> specified in its project.yaml file:</p> <p>The project.yaml file of the downstream project is the following:</p> <pre><code>project:\n  dependencies:\n    - name: deps.bootstrap.infra\n      version: v2.20.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}       \n    - name: kodjin.bootstrap.infra\n      version: v4.4.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n    # ...\n</code></pre> <p>The dependencies should be declared in the correct order of inheritance: the first one is <code>deps.bootstrap.infra</code>, then <code>kodjin.bootstrap.infra</code>, then other repositories (if needed).</p> <p>In this case, a version of the <code>Helmfile</code> hooks in the <code>inventory.hooks</code> section is not specified,  however, it is indicated that the current project of the repository inherits <code>kodjin.bootstrap.infra</code> with the <code>v4.4.0</code> version.  In turn, <code>kodjin.bootstrap.infra</code> inherits the <code>deps.bootstrap.infra</code> repository.  The project.yaml file for the <code>kodjin.bootstrap.infra</code> repository is also missing the version of the hooks:</p> <pre><code>project:\n  dependencies:\n    - name: deps.bootstrap.infra\n      version: v2.19.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n    # ...\n</code></pre> <p>The project.yaml file of the <code>deps.bootstrap.infra</code> repository  of the <code>v2.20.0</code> version will contain the version of the <code>Helmfile</code> hooks, which will be inherited by the downstream projects:</p> <pre><code>inventory:\n  # ...\n  hooks:\n    helmfile.hooks.infra:\n      version: v1.19.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  # ...\n</code></pre> <p>This configuration scheme will look like this:</p> <pre><code>Project repo name:            deps.bootstrap.infra ---------&gt; kodjin.bootstrap.infra -------&gt; &lt;downstream_project&gt;.bootstrap.infra\nProject repo version:         v2.20.0                         v4.4.0                          &lt;downstream_project_version&gt;\nHooks repo name with version: helmfile.hooks.infra-v1.19.0 -&gt; helmfile.hooks.infra-v1.19.0 -&gt; helmfile.hooks.infra-v1.19.0\n</code></pre> <p>Since the downstream project\u2019s repositories inherit the <code>Helmfile</code> hooks from the <code>deps.bootstrap.infra</code> repository, and we redefined the <code>deps.bootstrap.infra</code> dependency in the downstream project\u2019s, all repositories will inherit this concrete version, and only it will be downloaded.</p> </li> </ol>"},{"location":"configuration/project-management/dependencies-management-and-project-inheritance/#change-inherited-versions-of-clusters-helm-plugins-tools","title":"Change inherited versions of clusters, Helm plugins, tools","text":"<p>The same inheritance method as for the <code>Helmfile</code> hooks is supported for <code>inventory</code> sections as <code>clusters</code>, <code>helm-plugins</code> and <code>tools</code>. If a specific version is not specified, the latest version from the upstream project\u2019s repository will always be used, with one exception only: in this case, multi-versioning is not supported, and only one version will be downloaded.</p> <p>All add-ons versions in the inventory sections must be specified in the <code>SemVer2</code> format, as the inheritance mechanism relies on this format to distinguish the version order.</p>"},{"location":"configuration/project-management/preparation-of-project-repository/","title":"Preparation of the project repository","text":"<p>Prerequisites:</p> <ul> <li>Create a remote repository in your Version Control System (GitHub) according to the following requirements.</li> <li>Clone the project repository. For example: project.bootstrap.infra OR <code>git init &amp;&amp; git remote add &amp;&amp; git commit -m \"init commit\"</code></li> <li>Checkout the needed branch. For example: <code>develop|staging|production</code>.</li> <li>Make sure there is a file in the root of the repository named project.yaml, which contains the project configuration.</li> <li>Initialize the configuration.</li> </ul>"},{"location":"configuration/project-management/preparation-of-project-repository/#automatic-generation-of-the-project-structure-from-scratch","title":"Automatic generation of the project structure from scratch","text":"<p>RMK supports automatic generation of the project structure from scratch, according to the presented project specification described in project.yaml file.</p> <p>Use the following command:</p> <pre><code>rmk project generate\n</code></pre> <p>Add the <code>--create-sops-age-keys</code> flag if you want to create the project structure along with SOPS age private keys.</p> <p>This will create a default project structure and prepare an example release based on Nginx.</p>"},{"location":"configuration/project-management/preparation-of-project-repository/#projectyaml","title":"project.yaml","text":"<p>The <code>project.yaml</code> file is the main configuration file of the repository, the file is used by RMK and contains the following main sections:</p> <ul> <li> <p><code>project</code>: Optional, contains a list of dependencies of the upstream project\u2019s repositories and the project specification.</p> <pre><code>project:\n  # Optional, needed if you want to add the dependencies with upstream projects to the downstream project.\n  dependencies:\n      # Required, dependencies upstream project's repository name.\n    - name: &lt;upstream_repository_prefix&gt;.bootstrap.infra\n      # Required, dependencies upstream project's repository version in `SemVer2` format, also can be a branch name or a commit hash.\n      version: &lt;SemVer2&gt;\n      # Required, dependencies upstream project's repository URL.\n      url: git::https://github.com/&lt;owner&gt;/{{.Name}}.git?ref={{.Version}}\n      # Optional, if it is expected that the dependency will be downloaded as an artifact from another storage.\n      artifact-url: https://&lt;owner&gt;-{{.HelmfileTenant}}-artifacts-infra.s3.&lt;region&gt;.amazonaws.com/{{.Version}}/{{.HelmfileTenant}}-{{.Version}}.tar.gz\n\n  # Optional, needed if you want automatic generation of the project structure from scratch.\n  spec:\n    # Required, list of available environments of the project (Git branches). \n    environments:\n      - develop\n      - staging\n      - production\n    # Optional, list of owners of the project.\n    owners:\n      - &lt;owner_1&gt;\n      - &lt;owner_2&gt;\n    # Required, list of available scope of the project.\n    scopes:\n      - clusters\n      - &lt;upstream_project_name&gt;\n      - &lt;downstream_project_name&gt;\n# ... \n</code></pre> </li> </ul> <ul> <li> <p><code>inventory</code>: Optional, contains a map of the extra configurations required to launch the project.</p> <pre><code>inventory:\n  # Optional, contains a map of the cluster provider repositories with Terraform manifests or other provisioning configurations.  \n  clusters:\n    # Optional, cluster provider repository name.\n    aws.provisioner.infra:\n      # Required, cluster provider repository version in the `SemVer2` format.\n      version: &lt;SemVer2&gt;\n      # Required, cluster provider repository URL.\n      url: git::https://github.com/&lt;owner&gt;/{{.Name}}.git?ref={{.Version}}\n    # ...\n  # Optional, contains a map of the Helm plugins repositories.\n  helm-plugins:\n    # Optional, Helm plugin name.\n    diff:\n      # Required, Helm plugin version in the `SemVer2` format.\n      version: &lt;SemVer2&gt;\n      # Required, Helm plugin repository URL.\n      url: https://github.com/&lt;owner&gt;/helm-diff\n    # ...\n  # Optional, contains a map of the Helmfile hooks repositories with shell scripts.\n  hooks:\n    # Optional, Helmfile hooks repository name.\n    helmfile.hooks.infra:\n      # Required, Helmfile hooks repository version in the `SemVer2` format.\n      version: &lt;SemVer2&gt;\n      # Required, Helmfile hooks repository URL.\n      url: git::https://github.com/&lt;owner&gt;/{{.Name}}.git?ref={{.Version}}\n  # Optional, contains a map of the sources of binary file tools.\n  tools:\n    # Optional, tool name.\n    terraform:\n      # Required, tool version in `SemVer2` format.\n      version: &lt;SemVer2&gt;\n      # Required, tool source URL.\n      url: https://releases.hashicorp.com/{{.Name}}/{{.Version}}/{{.Name}}_{{.Version}}_{{.Os}}_amd64.zip\n      # Optional, tool checksum source URL.\n      checksum: https://releases.hashicorp.com/{{.Name}}/{{.Version}}/{{.Name}}_{{.Version}}_SHA256SUMS\n      # Optional, specific key overrides for the described OS name.\n      os-linux: linux\n      os-mac: darwin\n    # ...\n</code></pre> </li> </ul> Example of the full <code>project.yaml</code> file. <pre><code>project:\n  dependencies:\n    - name: deps.bootstrap.infra\n      version: v2.17.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n      artifact-url: https://edenlabllc-{{.HelmfileTenant}}-artifacts-infra.s3.eu-north-1.amazonaws.com/{{.Version}}/{{.HelmfileTenant}}-{{.Version}}.tar.gz\n  spec:\n    environments:\n      - develop\n      - staging\n      - production\n    owners:\n      - owner1\n      - owner2\n    scopes:\n      - clusters\n      - deps\n      - project1\ninventory:\n  clusters:\n    aws.provisioner.infra:\n      version: v1.5.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n    k3d.provisioner.infra:\n      version: v0.2.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  helm-plugins:\n    diff:\n      version: v3.8.1\n      url: https://github.com/databus23/helm-diff\n    secrets:\n      version: v4.5.0\n      url: https://github.com/jkroepke/helm-secrets\n  hooks:\n    helmfile.hooks.infra:\n      version: v1.18.0\n      url: git::https://github.com/edenlabllc/{{.Name}}.git?ref={{.Version}}\n  tools:\n    terraform:\n      version: 1.0.2\n      url: https://releases.hashicorp.com/{{.Name}}/{{.Version}}/{{.Name}}_{{.Version}}_{{.Os}}_amd64.zip\n      checksum: https://releases.hashicorp.com/{{.Name}}/{{.Version}}/{{.Name}}_{{.Version}}_SHA256SUMS\n      os-linux: linux\n      os-mac: darwin\n    kubectl:\n      version: 1.27.6\n      url: https://dl.k8s.io/release/v{{.Version}}/bin/{{.Os}}/amd64/{{.Name}}\n      checksum: https://dl.k8s.io/release/v{{.Version}}/bin/{{.Os}}/amd64/{{.Name}}.sha256\n      os-linux: linux\n      os-mac: darwin\n    helm:\n      version: 3.10.3\n      url: https://get.helm.sh/{{.Name}}-v{{.Version}}-{{.Os}}-amd64.tar.gz\n      checksum: https://get.helm.sh/{{.Name}}-v{{.Version}}-{{.Os}}-amd64.tar.gz.sha256sum\n      os-linux: linux\n      os-mac: darwin\n    helmfile:\n      version: 0.157.0\n      url: https://github.com/{{.Name}}/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}_{{.Version}}_{{.Os}}_amd64.tar.gz\n      checksum: https://github.com/{{.Name}}/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}_{{.Version}}_checksums.txt\n      os-linux: linux\n      os-mac: darwin\n    jq:\n      version: 1.7\n      url: https://github.com/jqlang/{{.Name}}/releases/download/{{.Name}}-{{.Version}}/{{.Name}}-{{.Os}}\n      os-linux: linux-amd64\n      os-mac: macos-amd64\n      rename: true\n    sops:\n      version: 3.8.1\n      url: https://github.com/getsops/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}-v{{.Version}}.{{.Os}}\n      os-linux: linux.amd64\n      os-mac: darwin\n      rename: true\n    age:\n      version: 1.1.1\n      url: https://github.com/FiloSottile/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}-v{{.Version}}-{{.Os}}-amd64.tar.gz\n      os-linux: linux\n      os-mac: darwin\n    k3d:\n      version: 5.6.0\n      url: https://github.com/k3d-io/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}-{{.Os}}-amd64\n      os-linux: linux\n      os-mac: darwin\n      rename: true\n    yq:\n      version: 4.35.2\n      url: https://github.com/mikefarah/{{.Name}}/releases/download/v{{.Version}}/{{.Name}}_{{.Os}}_amd64\n      os-linux: linux\n      os-mac: darwin\n      rename: true\n</code></pre> <p>The project file supports placeholders, they are required for correct URL formation.</p> <ul> <li>{{.Name}}: Replaced with the <code>name</code> field.</li> <li>{{.Version}}: Replaced with the <code>version</code> field.</li> <li>{{.HelmfileTenant}}: Replaced with the tenant name for the Helmfile selected from the list.</li> <li>{{.Os}}: Replaced with the values from the <code>os-linux</code>, <code>os-mac</code> fields according to the specific operating system, where RMK is run.</li> </ul> <p>The field <code>rename</code> of the boolean type is required to correct the name of the binary file of the downloaded tool according to the value of the <code>name</code> field. This is mainly required for the cases, when the artifact is not the archive. For example:</p> <ul> <li>The initial file name after the download: <code>helmfile_darwin_amd64</code>.</li> <li>After applying the <code>rename</code> instruction it gets a value of the <code>name</code> field: <code>helmfile</code>.</li> </ul>"},{"location":"configuration/project-management/requirement-for-project-repository/","title":"Requirement for project repository","text":"<ol> <li>The name of the project repository should consist of the following parts: <code>&lt;project_name&gt;</code>.<code>&lt;custom_suffix&gt;</code>.    For example: <code>kodjin.bootstrap.infra</code> or <code>kodjin.infra</code>.</li> <li> <p>The project\u2019s repository exists within GitLabFlow only    and therefor supports the following set of static branches:</p> <ul> <li><code>develop</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <p>Each branch corresponds to its own environment with a separately deployed K8S cluster. RMK supports these branches   as well as the feature or release branches:</p> <ul> <li>A feature branch should have the following naming: <code>feature/&lt;issue_key&gt;-&lt;issue_number&gt;-&lt;issue_description&gt;</code>.    For example: <code>feature/FFS-1446-example</code>. RMK will use <code>&lt;issue_key&gt;</code> and <code>&lt;issue_number&gt;</code> as the feature cluster name.</li> <li>A release branch should have the following naming: <code>release/&lt;SemVer2&gt;-rc</code> or <code>release/&lt;SemVer2&gt;</code>    For example: <code>release/v1.0.0</code>. RMK will use the project name and the <code>&lt;SemVer2&gt;</code> tag as the release cluster name.</li> </ul> </li> </ol>"},{"location":"configuration/project-management/requirement-for-project-repository/#expected-repository-structure","title":"Expected repository structure:","text":"<pre><code>etc/clusters/&lt;provider&gt;/&lt;environment&gt;/values/\n  variables.auto.tfvars # Core variables for the AWS EKS cluster provider.\n  worker-groups.auto.tfvars # Variables describing the resources of the AWS EKS cluster.\netc/&lt;upstream_project_name&gt;/&lt;environment&gt;/secrets/\n  .sops.yaml # The public key for the current set of secrets.\n  .spec.yaml.gotmpl # The secrets template for generating new or rotating current secrets.\n  &lt;release name&gt;.yaml # Values containing release secrets for a specific environment.\netc/&lt;upstream_project_name&gt;/&lt;environment&gt;/values/\n  &lt;release name&gt;.yaml # Values containing release configuration for a specific environment.\n  &lt;release name&gt;.yaml.gotmpl # Values containing the release configuration for a specific environment using the Golang templates.\netc/&lt;upstream_project_name&gt;/&lt;environment&gt;/\n  releases.yaml # Release specification for installation of the charts.\n  globals.yaml # Set of global values within a specific scope.\n  globals.yaml.gotmpl # Set of global values within a specific scope using the Golang templates.\netc/&lt;downstream_project_name&gt;/&lt;environment&gt;/secrets/\n  .sops.yaml  # -//-\n  .spec.yaml.gotmpl # -//-\n  &lt;release name&gt;.yaml # -//-\netc/&lt;downstream_project_name&gt;/&lt;environment&gt;/secrets/\n  &lt;release name&gt;.yaml # -//-\n  &lt;release name&gt;.yaml.gotmpl # -//-\netc/&lt;downstream_project_name&gt;/&lt;environment&gt;/\n  releases.yaml # -//-\n  globals.yaml # - // -\n  globals.yaml.gotmpl # - // -\nhelmfile.yaml.gotmpl # Helmfile describing the release process for specific project releases using the Golang templates.\nproject.yaml # Project specification for the dependencies and inventory installed via RMK.\n</code></pre>"},{"location":"configuration/project-management/requirement-for-project-repository/#files-for-managing-releases-and-their-values-at-the-scope-level","title":"Files for managing releases and their values at the scope level","text":""},{"location":"configuration/project-management/requirement-for-project-repository/#requirement-for-releaseyaml","title":"Requirement for <code>release.yaml</code>","text":"<pre><code>&lt;release_name_foo&gt;: # Required, release name from helmfile.yaml.gotmpl.\n  enabled: true # Required, enable|disable release from helmfile.yaml.gotmpl.\n  image: # Optional, needed when using a private container image with the automatic release update feature of RMK.\n    repository: &lt;full_container_images_repository_url&gt;  \n    tag: &lt;container_images_tag&gt;\n&lt;release_name_bar&gt;: # -//-\n  enabled: false # -//-\n# ...\n</code></pre> <p>releases.yaml cannot be used as a template, all the values must be defined.</p>"},{"location":"configuration/project-management/requirement-for-project-repository/#requirement-for-globalsyamlgotmpl","title":"Requirement for <code>globals.yaml.gotmpl</code>","text":"<pre><code># configs - enumeration of configurations divided into sets related to the Kubernetes ConfigMaps.\nconfigs:\n  auditLog: |\n    {{- readFile (printf \"%s/audit-log.json\" \"values/configs\") | nindent 4 }}\n  # ...\n\n# envs - enumeration of environment variables divided into sets related to the Kubernetes environment variables for the containers.\nenvs:\n  # The global environment variable used by multiple releases\n  FOO: false\n  # ...\n\n# hooks - enumeration of environment variables divided into sets related to the Helmfile hooks arguments.\nhooks:\n  &lt;release_name&gt;:\n    common-postuninstall-hook:\n      events:\n         - postuninstall\n      showlogs: true\n      command: \"{{`{{ .Release.Labels.bin }}`}}/common-postuninstall-hook.sh\"\n      args:\n         - \"{{`{{ .Release.Namespace }}`}}\"\n  # ...\n</code></pre> <p>globals.yaml.gotmpl is used in two cases:</p> <ol> <li>When values, configurations or environment variables need to be declared globally for multiple releases. </li> <li>When the current project is planned to be inherited by a downstream project and the overrides should be supported.</li> </ol>"},{"location":"configuration/project-management/requirement-for-project-repository/#requirement-for-helmfileyamlgotmpl","title":"Requirement for <code>helmfile.yaml.gotmpl</code>","text":"<p>The list of the <code>helmfile.yaml.gotmpl</code> sections that must be defined and remained unchanged for working with RMK correctly is:</p> <pre><code>environments:\n  local:\n  develop:\n    missingFileHandler: Warn\n    values:\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml.gotmpl\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/releases.yaml\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml.gotmpl\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/releases.yaml\n  staging:\n    missingFileHandler: Warn\n    values:\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml.gotmpl\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/releases.yaml\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml.gotmpl\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/releases.yaml\n  production:\n    missingFileHandler: Warn\n    values:\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml.gotmpl\n      - etc/&lt;project_name&gt;/{{ .Environment.Name }}/releases.yaml\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/globals.yaml.gotmpl\n      - {{ requiredEnv \"PWD\" }}/etc/&lt;project_name&gt;/{{ .Environment.Name }}/releases.yaml\n---\n\n# The set of paths for the inherited Helmfiles is controlled through the project.yaml file using RMK.\n# DO NOT EDIT the \"helmfiles\" field's values.\nhelmfiles: {{ env \"HELMFILE_&lt;project_name&gt;_PATHS\" }}\n\nmissingFileHandler: Warn\n\ncommonLabels:\n  scope: &lt;project_name&gt;\n  bin: {{ env \"HELMFILE_&lt;project_name&gt;_HOOKS_DIR\" }}/bin\n\ntemplates:\n  release:\n    createNamespace: true\n    labels:\n      app: \"{{`{{ .Release.Name }}`}}\"\n    missingFileHandler: Warn\n    values:\n      - etc/{{`{{ .Release.Labels.scope }}`}}/{{`{{ .Environment.Name }}`}}/values/{{`{{ .Release.Name }}`}}.yaml.gotmpl\n      - etc/{{`{{ .Release.Labels.scope }}`}}/{{`{{ .Environment.Name }}`}}/values/{{`{{ .Release.Name }}`}}.yaml\n      - {{ requiredEnv \"PWD\" }}/etc/{{`{{ .Release.Labels.scope }}`}}/{{`{{ .Environment.Name }}`}}/values/{{`{{ .Release.Name }}`}}.yaml.gotmpl\n      - {{ requiredEnv \"PWD\" }}/etc/{{`{{ .Release.Labels.scope }}`}}/{{`{{ .Environment.Name }}`}}/values/{{`{{ .Release.Name }}`}}.yaml\n    secrets:\n      - {{ requiredEnv \"PWD\" }}/etc/{{`{{ .Release.Labels.scope }}`}}/{{`{{ .Environment.Name }}`}}/secrets/{{`{{ .Release.Name }}`}}.yaml\n\nreleases:\n  - name: &lt;release_name_foo&gt;\n    installed: {{ .Values | get (print \" &lt;release_name_foo&gt;\" \".enabled\") false }}\n</code></pre> <p>You can use the <code>rmk project generate</code> command to view the full example of the contents of all the project files.</p>"},{"location":"configuration/release-management/release-management/","title":"Release management","text":"<p>RMK uses Helmfile for the release management.</p> <p>RMK uses a reduced set of the <code>Helmfile</code> commands without changing their behavior.  The full list of commands can be found in the release category.  Additionally, flags are provided for the commands, which allow extending capabilities and help during the command execution debug.</p> <p>For example:</p> <pre><code>rmk release build\nrmk release list --selector app=name\nrmk release template --selector app=name --skip-context-switch\nrmk release sync --helmfile-log-level=debug --selector app=name \nrmk release destroy \n</code></pre> <p>The <code>--skip-context-switch</code> (<code>-s</code>) flag can be used for the commands like <code>rmk release template</code> to skip switching to a Kubernetes cluster. This might be useful in the situations, when a cluster has not been provisioned yet and its releases and values are being developed.</p> <p>In a project repository, all the release values files are stored in the <code>etc/&lt;scope&gt;/&lt;env&gt;/values/</code> directories. For example:</p> <pre><code>etc/deps/develop/values/\netc/kodjin/staging/values/\n</code></pre> <p>The release values are inherited by the projects, e.g., the upstream project\u2019s values are included into the downstream project\u2019s values.</p> <p>All <code>releases.yaml</code> files controlling which releases are enabled/disabled are stored in the <code>etc/&lt;scope&gt;/&lt;env&gt;/</code>directories. For example:</p> <pre><code>etc/deps/develop/releases.yaml\n</code></pre> <p>The <code>releases.yaml</code> files are not inherited by the projects in contrast to the values. Each project should have its <code>releases.yaml</code> files for all deployed scopes and envs. Running any of the commands in the release category will trigger the dependency resolution mechanism, as well as the check for the Kubernetes context for the current environment to prevent releases  from being synchronized outside the environment context.</p> <p>The release installation order is declared in <code>helmfile.yaml.gotmpl</code> file.</p>"},{"location":"configuration/release-management/release-management/#examples-of-usage","title":"Examples of Usage","text":""},{"location":"configuration/release-management/release-management/#list-of-all-available-releases","title":"List of all available releases","text":"<pre><code>rmk release list\n</code></pre>"},{"location":"configuration/release-management/release-management/#viewing-a-specific-release-yaml-after-the-helm-values-template-rendering","title":"Viewing a specific release YAML after the Helm values template rendering","text":"<pre><code>rmk release template --selector app=traefik\n</code></pre>"},{"location":"configuration/release-management/release-management/#synchronization-of-a-specific-scope-of-the-releases","title":"Synchronization of a specific scope of the releases","text":"<pre><code>rmk release sync --selector scope=deps\n</code></pre>"},{"location":"configuration/release-management/release-management/#synchronization-of-a-specific-release-with-passing-the-set-helmfile-argument","title":"Synchronization of a specific release with passing the \u201c\u2013set\u201d Helmfile argument","text":"<pre><code>rmk release sync --selector app=redis --helmfile-args=\"--set='values.name=foo'\"\n</code></pre>"},{"location":"configuration/release-management/release-management/#destroy-all-releases","title":"Destroy all releases","text":"<pre><code>rmk release destroy\n</code></pre> <p>Among the <code>Helmfile</code> selectors, the following predefined keys  are provided out of the box: </p> <ul> <li>Release name.</li> <li>Release namespace.</li> <li>Chart name.</li> </ul> <p>For example:</p> <pre><code>rmk release sync --selector namespace=kube-system\n</code></pre>"},{"location":"configuration/release-management/release-management/#overriding-release-values-for-inherited-projects","title":"Overriding release values for inherited projects","text":"<p>It is possible to override any release value for the inherited project repository. You can override any element separately in its YAML file.</p> <p>For example, you have the following file in the upstream project by the <code>.PROJECT/dependencies/deps.bootstrap.infra-&lt;version&gt;/etc/deps/develop/values/metrics-server.yaml</code> path:</p> <pre><code>apiService:\n  create: true\nextraArgs:\n  - --metric-resolution=10s\n  - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname\n  - --cert-dir=/tmp\nresources:\n  requests:\n    cpu: 100m\n    memory: 200Mi\ncontainerSecurityContext:\n  readOnlyRootFilesystem: true\nextraVolumes:\n  - name: tmpdir\n    emptyDir: {}\nextraVolumeMounts:\n  - name: tmpdir\n    mountPath: /tmp\n</code></pre> <p>Then you want to change the <code>resources.requests.cpu</code> value of the <code>develop</code> environment in your downstream project.  In this case, you don\u2019t need to copy the whole file but only change the concrete value by repeating the YAML path to it.  So, your file with the override will look like this:</p> <pre><code>resources:\n  requests:\n    cpu: 100m\n</code></pre> <p>You cannot override a part of an element if it is an array.  If you want to override the name of the extraVolumeMounts field of the example file above, you cannot use the following content: <pre><code>extraVolumeMounts:\n  - name: tmp\n</code></pre> The correct way to override is to provide the whole item of the array: <pre><code>extraVolumeMounts:\n  - name: tmp\n    mountPath: /tmp\n</code></pre></p> <p>To check the final result, run the <code>rmk release template</code> command and see the final YAML.</p>"},{"location":"configuration/release-management/release-management/#release-update-and-integration-into-the-cd-pipeline","title":"Release update and integration into the CD pipeline","text":"<p>The <code>rmk release update</code> command automates the process of updating and delivering releases  according to the version changes of artifacts (container images) following the GitOps methodology.</p> <p>Since RMK is a binary file that can be downloaded and installed on any Unix-based CI/CD system,  it can be integrated with almost any CI/CD system: GitHub Actions, GitLab, Drone CI, Jenkins, etc.</p>"},{"location":"configuration/release-management/release-management/#example-of-integration-with-github-actions","title":"Example of integration with GitHub Actions:","text":"<p>Prerequisites:</p> <ul> <li>The project repository has already been generated and prepared using RMK.</li> </ul> <p>Create the following workflow in your project repository at <code>.github/workflows/release-update.yaml</code>.  An example content of the GitHub Actions\u2019 workflow:</p> <pre><code>name: Release update\n\non:\n  workflow_dispatch:\n    inputs:\n      image_repository_full_name:\n        description: Image repository full name of application.\n        required: true\n      version:\n        description: Current application version.\n        required: true\n\njobs:\n  release-update:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout main repository\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.ref }}\n          fetch-depth: 0\n\n      - name: Release update\n        env:\n          AWS_REGION: us-east-1\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          RMK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_REPO }}\n          RMK_SLACK_WEBHOOK: ${{ secrets.RMK_SLACK_WEBHOOK }}\n          RMK_SLACK_CHANNEL: project-cd-notifications\n          RMK_RELEASE_UPDATE_REPOSITORY: ${{ github.event.inputs.image_repository_full_name }}\n          RMK_RELEASE_UPDATE_TAG: ${{ github.event.inputs.version }}\n        run: |\n          curl -sL \"https://edenlabllc-rmk-tools-infra.s3.eu-north-1.amazonaws.com/rmk/s3-installer\" | bash\n\n          rmk config init --progress-bar=false --slack-notifications\n          rmk release update --skip-ci --deploy\n</code></pre> <p>In this example, we have prepared a <code>GitHub Action</code> that expects two input parameters: </p> <ul> <li><code>image_repository_full_name</code></li> <li><code>version</code></li> </ul> <p>As soon as a request with these parameters is sent to this action,  RMK will be executed, first analyzing all the <code>releases.yaml</code> files to match the <code>image_repository_full_name</code> and will replace the tag field  with the corresponding version if the versions differ.  After that, it will automatically commit the changes to the current branch in the <code>releases.yaml</code> files where changes have been found.  Then, it will synchronize the releases where the version changes were found.</p> <p>An example of the <code>releases.yaml</code> file:</p> <pre><code># ...\nfoo:\n  enabled: true\n  image:\n    repository: 123456789.dkr.ecr.us-east-1.amazonaws.com/app.foo\n    tag: v0.11.1\nbar:\n  enabled: true\n  image:\n    repository: 123456789.dkr.ecr.us-east-1.amazonaws.com/app.bar\n    tag: v0.16.0\n# ...\n</code></pre> <p>To make the code delivery process fully automatic on the CI pipeline\u2019s side, after building and pushing  the container image to the image repository, add a step that triggers the deployment action and passes  the container image repository\u2019s full name and its final tag. This can be done via an API call using cURL  or through GitHub CLI. This way, we achieve automatic code delivery to the infrastructure environment.</p>"},{"location":"configuration/secrets-management/secrets-management/","title":"Secrets management","text":"<p>RMK uses SOPS and Age for secrets management. All RMK commands related to the secrets management can be found under the rmk secret command category.</p> <p>In a project repository, all secrets files are stored in the <code>etc/&lt;scope&gt;/&lt;env&gt;/secrets/</code> directories. For example:</p> <pre><code>etc/deps/develop/secrets/mongodb.yaml\netc/kodjin/develop/secrets/kodjin-minio-config-buckets.yaml\n</code></pre> <p>Normally, the files are committed to Git because they are encrypted using SOPS age keys and symmetric-key algorithms. The keys are stored remotely in an encrypted bucket of AWS S3, downloaded locally when first using RMK on that machine.</p> <p>The secrets are never inherited by projects, in contrast to values. Each project should have its own unique set  of secrets for all deployed releases.</p>"},{"location":"configuration/secrets-management/secrets-management/#sops-age-keys-management","title":"SOPS age keys management","text":"<p>Initially, a Kubernetes cluster admin creates the keys using the following command:</p> <pre><code>rmk secret keys create\n</code></pre> <p>This command will create a set of <code>Age</code> private keys for each scope in the user\u2019s home directory  at <code>$HOME/.rmk/sops-age-keys/&lt;project_name&gt;-sops-age-keys-&lt;short_AWS_account_id&gt;/*.txt</code>.  The command will create a <code>Age</code> private key for the scope for which an empty  SOPS configuration file <code>etc/&lt;scope&gt;/&lt;env&gt;/secrets/.sops.yaml</code> was created.  Additionally, <code>creation_rules</code> containing the public key and regex for filtering secrets will be automatically added to this file.  Example of a <code>.sops.yaml</code> file:</p> <pre><code>creation_rules:\n  - path_regex: .+\\.yaml$\n    age: 'age12ugnsdhxd44fa56q5w22mvf09e93p66xrcrnxmxla4dnqpyugpwqs2swag'\n</code></pre> <p>The SOPS configuration files for all secret scopes can be generated using the <code>rmk project generate</code> command.</p> <p>Then the generated keys might be uploaded explicitly to S3:</p> <pre><code>rmk secret keys upload\n</code></pre> <p>AWS users must have the <code>AdministratorAccess</code> permissions to be able to upload the SOPS age keys to S3.</p> <p>After the keys have been created by the cluster admin, they can be downloaded from S3:</p> <pre><code>rmk secret keys download\n</code></pre> <p>AWS users must have read permissions for downloading keys from S3, otherwise they won\u2019t be able to encode/decode secrets and release services using RMK.</p> <p>After that the <code>$HOME/.rmk/sops-age-keys/&lt;project_name&gt;-sops-age-keys-&lt;short_AWS_account_id&gt;</code> directory will have all the needed keys needed for secrets encryption or decryption.</p>"},{"location":"configuration/secrets-management/secrets-management/#generating-all-secrets-from-scratch-in-a-batch-manner-using-the-rmk-secrets-manager","title":"Generating all secrets from scratch in a batch manner using the RMK secrets manager","text":"<p>In case of a creating tenant from scratch all the needed directories, such as <code>etc/&lt;scope&gt;/&lt;env&gt;/secrets/</code> should first be populated with an empty <code>.sops.yaml</code> file (acts as an indicator that this scope and environment will have the secrets). Also, before generating the secret files, you must create or complete a secret <code>.spec.yaml.gotmpl</code> file per each scope. <code>.spec.yaml.gotmpl</code> is a template that runs the sprig engine with additional functions.</p> <p>The additional functions which included in the template functions are:</p> <ul> <li>{{`{{ requiredEnv \u201cENV_NAME\u201d }}`}}: The function requires an input of the specified mandatory variable.</li> <li>{{`{{ prompt \u201cpassword\u201d }}`}}: The function asks for interactive input. Useful for entering sensitive data.</li> </ul> <p>Example of the files needed for the generation:</p> <pre><code>etc/deps/develop/secrets/.sops.yaml\netc/deps/develop/secrets/.spec.yaml.gotmpl\n</code></pre> <p>An example of <code>.spec.yaml.gotmpl</code> for the deps scope:</p> <pre><code>{{- $minioSecretKey := randAlphaNum 16 -}}\ngeneration-rules:\n  - name: ecr-token-refresh-operator\n      template: |\n        envSecret:\n          AWS_ACCESS_KEY_ID: {{`{{ requiredEnv \"AWS_ACCESS_KEY_ID\" }}`}}\n          AWS_SECRET_ACCESS_KEY: {{`{{ requiredEnv \"AWS_SECRET_ACCESS_KEY\" }}`}}\n  - name: elastic\n      template: |\n        esUserName: admin\n        esPassword: {{ randAlphaNum 16 }}\n  # ...\n  - name: minio\n      template: |\n        rootUser: minio\n        rootPassword: {{ $minioSecretKey }}\n  - name: redis\n      template: |\n        auth:\n          password: {{ randAlphaNum 16 }}\n  # ...\n</code></pre> <p>Then run the following command to generate all the secrets is a batch manner:</p> <pre><code>rmk secret manager generate\n</code></pre> <p>After that the directories with the secret files will be generated.  The files will have the plain unencrypted YAML content. After that, review the content of the new files and run the following command to encode them:</p> <pre><code>rmk secret manager encrypt\n</code></pre> <p>The directories without the <code>.sops.yaml</code> or <code>.spec.yaml.gotmpl</code> files will be ignored.</p> <p>Also, each of the <code>.sops.yaml</code> files will be updated automatically with the correct paths and public keys of the SOPS age keys used for encryption.</p>"},{"location":"configuration/secrets-management/secrets-management/#generating-a-single-secret-from-scratch-using-the-rmk-secrets-manager","title":"Generating a single secret from scratch using the RMK secrets manager","text":"<p>To create a single secret from scratch (e.g., when a new service (release) is added), add a template of the new secret  to <code>.spec.yaml.gotmpl</code>. For example:</p> <pre><code>  # ...\n  - name: new-release\n    template: |\n      envSecret:\n        USERNAME: user\n        PASSWORD: {{ randAlphaNum 16 }}\n  # ...\n</code></pre> <p>Then generate the new secret as the plain YAML and encrypt it using RMK for the needed scope and environment. For example:</p> <pre><code>rmk secret manager generate --scope kodjin --environment develop\nrmk secret manager encrypt --scope kodjin --environment develop\n</code></pre> <p>At this moment, the <code>.sops.yaml</code> files has already been populated and therefor need no manual changes. The secrets generation process works in an idempotent, declarative mode, which means it will skip previously generated secret files.</p>"},{"location":"configuration/secrets-management/secrets-management/#editing-a-single-secret","title":"Editing a single secret","text":"<p>For some environments where the <code>.spec.yaml.gotmpl</code> file and the manager commands were not used for some legacy reasons, the <code>rmk secret edit</code> command can be executed. The command works in an idempotent mode, which means that it can be used for both creating a new secret (e.g., when adding a new release/service) and editing an existing one:</p> <pre><code>rmk secret edit &lt;path_to_new_file_or_existing_secret&gt;\n</code></pre> <p>For example:</p> <pre><code>rmk secret edit etc/deps/develop/secrets/mongodb.yaml\n</code></pre> <p>An CLI editor will be displayed (e.g., vim). After the required changes are performed,  save and exit the editor. This will result in an encrypted and edited secret file (no need to encode it explicitly).</p> <p>Manual editing of the encrypted secrets files is strictly forbidden, because SOPS automatically controls the checksums of the secret files.</p>"},{"location":"configuration/secrets-management/secrets-management/#viewing-an-existing-secret","title":"Viewing an existing secret","text":"<p>To view the content of an existing secrets content, use the following command:</p> <pre><code>rmk secret view &lt;file&gt;\n</code></pre> <p>For example:</p> <pre><code>rmk secret view etc/deps/develop/secrets/minio.yaml\n</code></pre> <p>This might be useful when viewing credentials of the deployed services, e.g., a database or a web UI.</p>"},{"location":"configuration/secrets-management/secrets-management/#rotate-secrets-for-specific-scope-and-environment","title":"Rotate secrets for specific scope and environment","text":"<p>To force a new generation of the secrets for a specific scope and environment according to the <code>.spec.yaml.gotmpl</code> file, run the following command (in this example, the scope is <code>kodjin</code>, the environment is <code>production</code>):</p> <pre><code>rmk secret manager generate --scope kodjin --environment production --force\n</code></pre> <p>You might need to provide the required environment variables</p> <p>To encode the generated secrets, run:</p> <pre><code>rmk secret manager encrypt --scope kodjin --environment production\n</code></pre>"}]}